`/mnt/c/Users/mpaulus/source/repos/genopt-xlim/examples/absorption/abs_fit_data.tsv`
1 V_hw 2 hwst 3 hwrt 4 V_cw 5 cwst 6 cwrt 7 V_chw 8 chwrt 9 chwst

UA_e = %uae% { kBtu/h °F }
UA_c = %uac% { kBtu/h °F }
UA_r = %uar% { kBtu/h °F }

-- T_8 = K: 49 {°F}; -- CHWST
-- T_12 = K: 85 {°F}; -- CWST
-- T_1 = K: 210 {°F}; -- HWST

T_8 = K: chwst;
T_12 = K: cwst;
T_1 = K: hwst;

s_w = water_density * water_c

C_a_e { kBTU/h °F} = V_chw * s_w
C_a_c { kBTU/h °F} = V_cw * s_w
C_a_r { kBTU/h °F} = V_hw * s_w

Ntu_e = UA_e / C_a_e
Ntu_c = UA_c / C_a_c
Ntu_r = UA_r / C_a_r

ε_a_e = 1 - exp:-Ntu_e;
ε_a_c = 1 - exp:-Ntu_c;
ε_a_r = 1 - exp:-Ntu_r;

T_15_1 = K: 30 {°F};
T_16_1 = K: 105 {°F};
T_14_1 = K: 190 {°F};

Q_a_e_data { kW } = V_hw * s_w * (hwst - hwrt)
Q_a_c_data { kW } = V_cw * s_w * (cwrt - cwst)
Q_a_r_data { kW } = V_chw * s_w * (chwrt - chwst)

Q_a_e_1 = 3516 { kW }
Q_a_c_1 = 8540 { kW }
Q_a_r_1 = 5023 { kW }

γ_a = 0.67
s = %s% { kW / K }

D_c = ε_a_c * C_a_c
D_e = ε_a_e * C_a_e
D_r = ε_a_r * C_a_r

template zero_diff Q_a_e { kW } Q_a_c { kW } Q_a_r { kW } T_14 { K } T_15 { K } T_16 { K }
    diff1 = ε_a_e * C_a_e * (T_8 - T_15) - Q_a_e
    diff2 = ε_a_c * C_a_c * (T_16 - T_12) - Q_a_c
    diff3 = ε_a_r * C_a_r * (T_1 - T_14) - Q_a_r
    diff4 = Q_a_e + Q_a_r - Q_a_c
    diff5 = Q_a_e / Q_a_r - γ_a
    diff6 = Q_a_e/T_15 + Q_a_r/T_14 + s - Q_a_c/T_16
end

template update Q_a_e { kW } Q_a_c { kW } Q_a_r { kW } T_14 { K } T_15 { K } T_16 { K }
    ij is inverse_jacobian: Q_a_e, Q_a_c, Q_a_r, T_14, T_15, T_16;
    d is zero_diff: Q_a_e, Q_a_c, Q_a_r, T_14, T_15, T_16;

    Q_a_e_n = Q_a_e - (ij.d_1 * d.diff1 + ij.d_2 * d.diff2 + ij.d_3 * d.diff3 + ij.d_4 * d.diff4 + ij.d_5 * d.diff5 + ij.d_6 * d.diff6)
    Q_a_c_n = Q_a_c - (ij.d_7 * d.diff1 + ij.d_8 * d.diff2 + ij.d_9 * d.diff3 + ij.d_10 * d.diff4 + ij.d_11 * d.diff5 + ij.d_12 * d.diff6)
    Q_a_r_n = Q_a_r - (ij.d_13 * d.diff1 + ij.d_14 * d.diff2 + ij.d_15 * d.diff3 + ij.d_16 * d.diff4 + ij.d_17 * d.diff5 + ij.d_18 * d.diff6)
    T_15_n = T_15 - (ij.d_19 * d.diff1 + ij.d_20 * d.diff2 + ij.d_21 * d.diff3 + ij.d_22 * d.diff4 + ij.d_23 * d.diff5 + ij.d_24 * d.diff6)
    T_16_n = T_16 - (ij.d_25 * d.diff1 + ij.d_26 * d.diff2 + ij.d_27 * d.diff3 + ij.d_28 * d.diff4 + ij.d_29 * d.diff5 + ij.d_30 * d.diff6)
    T_14_n = T_14 - (ij.d_31 * d.diff1 + ij.d_32 * d.diff2 + ij.d_33 * d.diff3 + ij.d_34 * d.diff4 + ij.d_35 * d.diff5 + ij.d_36 * d.diff6)
end

template inverse_jacobian Q_a_e { kW } Q_a_c { kW } Q_a_r { kW } T_14 { K } T_15 { K } T_16 { K }
    -- K_1 is really the determinant of the Jacobian matrix, all terms in the inverse are divided by this
    K_1 = (((D_c*D_e*D_r*Q_a_r*T_14+D_c*D_e*Q_a_r^2)*T_15^2 +D_c*D_e*D_r*Q_a_e*T_14^2*T_15+D_c*D_r*Q_a_e^2*T_14^2) *T_16^2 +((-D_c*D_e*D_r*Q_a_r)-D_c*D_e*D_r*Q_a_e)*T_14^2*T_15^2*T_16 +(D_e*D_r*Q_a_c*Q_a_r+D_e*D_r*Q_a_c*Q_a_e)*T_14^2*T_15^2)
    K_2 = T_14^2*T_15^2*T_16^2
    K_3 = T_14^2*T_15^2
    K_4 = T_15^2*T_16^2
    K_5 = T_14^2*T_16^2
    K_6 = D_c*D_e*D_r
    K_7 = D_c*D_e
    K_8 = D_c*D_r
    K_9 = D_e*D_r
    K_10 = Q_a_e*Q_a_r*Q_a_c
    K_11 = Q_a_e*Q_a_r
    K_12 = Q_a_e*Q_a_c
    K_13 = Q_a_r*Q_a_c
    d_1 = -(K_5*K_8*Q_a_e^2)/K_1
    d_2 = -(K_12*K_3*K_9)/K_1
    d_3 = -(K_11*K_4*K_7)/K_1
    d_4 = -(K_3*K_6*Q_a_e*T_16-K_12*K_3*K_9)/K_1
    d_5 = -(K_3*K_6*Q_a_r^2*T_16-K_4*K_6*Q_a_r^2*T_14-K_4*K_7*Q_a_r^3-K_13*K_3*K_9*Q_a_r)/K_1
    d_6 = (K_2*K_6*Q_a_e)/K_1
    d_7 =  -(K_5*K_8*Q_a_e^2+K_11*K_5*K_8)/K_1
    d_8 = -((K_13+K_12)*K_3*K_9)/K_1
    d_9 = -(K_4*K_7*Q_a_r^2+K_11*K_4*K_7)/K_1
    d_10 = -((K_3*K_6*Q_a_r+K_3*K_6*Q_a_e)*T_16+((-K_13)-K_12)*K_3*K_9+K_1)/K_1
    d_11 = -(K_5*K_6*Q_a_r^2*T_15-K_4*K_6*Q_a_r^2*T_14-K_4*K_7*Q_a_r^3+K_11*K_5*K_8*Q_a_r)/K_1
    d_12 = (K_2*K_6*Q_a_r+K_2*K_6*Q_a_e)/K_1
    d_13 =  -(K_11*K_5*K_8)/K_1
    d_14 = -(K_13*K_3*K_9)/K_1
    d_15 = -(K_4*K_7*Q_a_r^2)/K_1
    d_16 = -(K_3*K_6*Q_a_r*T_16-K_13*K_3*K_9)/K_1
    d_17 = (K_3*K_6*Q_a_r^2*T_16-K_5*K_6*Q_a_r^2*T_15+((-K_13*K_3*K_9)-K_11*K_5*K_8)*Q_a_r)/K_1
    d_18 = (K_2*K_6*Q_a_r)/K_1
    d_19 =  ((K_3*K_8*Q_a_r+K_3*K_8*Q_a_e)*T_16-K_5*K_8*Q_a_e*T_15-K_4*K_8*Q_a_r*T_14-D_c*K_4*Q_a_r^2+((-D_r*K_13)-D_r*K_12)*K_3)/K_1
    d_20 = (D_r*K_12*K_3)/K_1
    d_21 = (D_c*K_11*K_4)/K_1
    d_22 = (K_3*K_8*Q_a_e*T_16-D_r*K_12*K_3)/K_1
    d_23 = (K_3*K_8*Q_a_r^2*T_16-K_4*K_8*Q_a_r^2*T_14-D_c*K_4*Q_a_r^3-D_r*K_13*K_3*Q_a_r)/K_1
    d_24 = -(K_2*K_8*Q_a_e)/K_1
    d_25 =  -(D_r*K_5*Q_a_e^2+D_r*K_11*K_5)/K_1
    d_26 = -((K_3*K_9*Q_a_r+K_3*K_9*Q_a_e)*T_16-K_5*K_9*Q_a_e*T_15-K_4*K_9*Q_a_r*T_14-D_e*K_4*Q_a_r^2-D_r*K_5*Q_a_e^2)/K_1
    d_27 = -(D_e*K_4*Q_a_r^2+D_e*K_11*K_4)/K_1
    d_28 = -(K_5*K_9*Q_a_e*T_15+K_4*K_9*Q_a_r*T_14+D_e*K_4*Q_a_r^2+D_r*K_5*Q_a_e^2)/K_1
    d_29 = -(K_5*K_9*Q_a_r^2*T_15-K_4*K_9*Q_a_r^2*T_14-D_e*K_4*Q_a_r^3+D_r*K_11*K_5*Q_a_r)/K_1
    d_30 = (K_2*K_9*Q_a_r+K_2*K_9*Q_a_e)/K_1
    d_31 =  (D_c*K_11*K_5)/K_1
    d_32 = (D_e*K_13*K_3)/K_1
    d_33 = ((K_3*K_7*Q_a_r+K_3*K_7*Q_a_e)*T_16-K_5*K_7*Q_a_e*T_15-K_4*K_7*Q_a_r*T_14-D_c*K_5*Q_a_e^2+((-D_e*K_13)-D_e*K_12)*K_3)/K_1
    d_34 = (K_3*K_7*Q_a_r*T_16-D_e*K_13*K_3)/K_1
    d_35 = -(K_3*K_7*Q_a_r^2*T_16-K_5*K_7*Q_a_r^2*T_15+((-D_c*K_11*K_5)-D_e*K_13*K_3)*Q_a_r)/K_1
    d_36 = -(K_2*K_7*Q_a_r)/K_1
end

zero_2 is update: Q_a_e_1, Q_a_c_1,  Q_a_r_1, T_14_1, T_15_1,  T_16_1;
zero_3 is update: zero_2.Q_a_e_n, zero_2.Q_a_c_n, zero_2.Q_a_r_n, zero_2.T_14_n, zero_2.T_15_n, zero_2.T_16_n;
zero_4 is update: zero_3.Q_a_e_n, zero_3.Q_a_c_n, zero_3.Q_a_r_n, zero_3.T_14_n, zero_3.T_15_n, zero_3.T_16_n;
zero_5 is update: zero_4.Q_a_e_n, zero_4.Q_a_c_n, zero_4.Q_a_r_n, zero_4.T_14_n, zero_4.T_15_n, zero_4.T_16_n;
zero_6 is update: zero_5.Q_a_e_n, zero_5.Q_a_c_n, zero_5.Q_a_r_n, zero_5.T_14_n, zero_5.T_15_n, zero_5.T_16_n;

Q_a_e_errors_sq = (zero_6.Q_a_e_n - Q_a_e_data)^2
Q_a_c_errors_sq = (zero_6.Q_a_c_n - Q_a_c_data)^2
Q_a_r_errors_sq = (zero_6.Q_a_r_n - Q_a_r_data)^2

sse = sum: Q_a_e_errors_sq; + sum: Q_a_c_errors_sq; + sum: Q_a_r_errors_sq;
